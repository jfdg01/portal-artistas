#!/usr/bin/env node

/**
 * Script to generate artwork images data from static images
 * This script scans the /static/images folder and creates artworkImages.ts
 * with image URLs linked to artwork IDs
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.join(__dirname, '..');

// Paths
const staticImagesPath = path.join(projectRoot, 'static', 'images');
const outputPath = path.join(projectRoot, 'src', 'lib', 'data');

// Ensure output directory exists
if (!fs.existsSync(outputPath)) {
	fs.mkdirSync(outputPath, { recursive: true });
}

/**
 * Normalize text by converting to lowercase, replacing spaces with hyphens, and removing accents
 */
function normalizeText(text) {
	return text
		.toLowerCase()
		.normalize('NFD') // Decompose accented characters
		.replace(/[\u0300-\u036f]/g, '') // Remove diacritics
		.replace(/\s+/g, '-') // Replace spaces with hyphens
		.replace(/[^a-z0-9-]/g, '') // Remove any other non-alphanumeric characters except hyphens
		.replace(/-+/g, '-') // Replace multiple hyphens with single hyphen
		.replace(/^-|-$/g, ''); // Remove leading/trailing hyphens
}

/**
 * Extract artwork ID from filename
 * Examples:
 * - "albor.webp" -> "albor"
 * - "albor-zoom-1.webp" -> "albor"
 * - "apunte-abstracto-1.webp" -> "apunte-abstracto-1"
 */
function extractArtworkId(filename) {
	const baseName = filename.replace(/\.webp$/, '').replace(/-zoom-\d+$/, '');
	return normalizeText(baseName);
}

/**
 * Determine if an image is a zoom variant
 */
function isZoomVariant(filename) {
	return /-zoom-\d+\.webp$/.test(filename);
}

/**
 * Get zoom number from filename
 */
function getZoomNumber(filename) {
	const match = filename.match(/-zoom-(\d+)\.webp$/);
	return match ? parseInt(match[1]) : null;
}

/**
 * Generate a title from artwork ID
 * Converts "estudio-acuarela-1" to "Estudio Acuarela 1"
 */
function generateTitle(id) {
	return id
		.split('-')
		.map((word) => word.charAt(0).toUpperCase() + word.slice(1))
		.join(' ');
}

/**
 * Scan images directory and group by artwork ID
 */
function scanImages() {
	const files = fs.readdirSync(staticImagesPath);
	const artworks = new Map();

	for (const file of files) {
		if (!file.endsWith('.webp')) continue;

		const artworkId = extractArtworkId(file);
		const isZoom = isZoomVariant(file);

		if (!artworks.has(artworkId)) {
			artworks.set(artworkId, {
				id: artworkId,
				images: []
			});
		}

		const artwork = artworks.get(artworkId);

		if (isZoom) {
			const zoomNumber = getZoomNumber(file);
			artwork.images.push({
				name: `zoom-${zoomNumber}`,
				src: `/images/${file}`,
				alt: `${generateTitle(artworkId)} zoom detail ${zoomNumber}`
			});
		} else {
			artwork.images.push({
				name: 'main',
				src: `/images/${file}`,
				alt: `${generateTitle(artworkId)} main view`
			});
		}
	}

	// Sort images: main first, then zoom variants by number
	for (const artwork of artworks.values()) {
		artwork.images.sort((a, b) => {
			if (a.name === 'main') return -1;
			if (b.name === 'main') return 1;
			if (a.name.startsWith('zoom-') && b.name.startsWith('zoom-')) {
				const aNum = parseInt(a.name.split('-')[1]);
				const bNum = parseInt(b.name.split('-')[1]);
				return aNum - bNum;
			}
			return a.name.localeCompare(b.name);
		});
	}

	return Array.from(artworks.values());
}

/**
 * Generate artworkImages.ts file
 */
function generateArtworkImages(artworks) {
	const content = `/**
 * Generated artwork images data
 * This file is automatically generated from static images
 * DO NOT EDIT MANUALLY - Run 'npm run generate-artwork-images' to regenerate
 */

export const artworkImages = {
${artworks
	.map(
		(artwork) =>
			`\t'${artwork.id}': [\n${artwork.images
				.map((img) => `\t\t{ name: '${img.name}', src: '${img.src}', alt: '${img.alt}' }`)
				.join(',\n')}\n\t]`
	)
	.join(',\n')}
};

export type ArtworkImages = typeof artworkImages;
`;

	fs.writeFileSync(path.join(outputPath, 'artworkImages.ts'), content);
	console.log('✅ Generated artworkImages.ts');
}

/**
 * Main execution
 */
function main() {
	console.log('🖼️  Generating artwork images from static images...');

	try {
		// Scan images directory
		const artworks = scanImages();
		console.log(
			`📁 Found ${artworks.length} artworks with ${artworks.reduce((sum, a) => sum + a.images.length, 0)} total images`
		);

		// Generate images file
		generateArtworkImages(artworks);

		console.log('✨ Artwork images generation complete!');
		console.log('📝 Images are now linked to artwork IDs in artworkImages.ts');
	} catch (error) {
		console.error('❌ Error generating artwork images:', error);
		process.exit(1);
	}
}

main();
